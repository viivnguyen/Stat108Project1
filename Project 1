library(shiny)
library(shinydashboard)
library(mosaic)
library(tidyverse)
library(glue)
library(sf)
library(leaflet)
library(DT)

# Load data
preRoedata <- read_csv("NationalAndStatePregnancy_PublicUse.csv")
postRoedata <- read_csv("MonthlyAbortionProvisionMonthly_2023-2024.csv")
state_policies <- read_csv("AbortionStatePolicies.csv")

valid_years <- c(
  seq(1988, 2000, by = 4),  # 1988, 1992, 1996, 2000
  seq(2005, 2020, by = 1)   # 2005 through 2020
)

# Data Wrangling
preRoedata1 <- preRoedata %>%
  select(state, year, abortionstotal, abortionratetotal, abortionratiototal) %>%
  filter(year %in% valid_years)

postRoedata$year <- year(mdy(postRoedata$month))

postRoedata1 <- postRoedata %>%
  select(state, year, median) %>%
  group_by(state, year) %>%
  summarize(abortionstotal = sum(median))

abortion_data <- full_join(preRoedata1, postRoedata1, by = c("state", "year"))

abortion_data1 <- abortion_data %>%
  mutate(abortionstotal = coalesce(abortionstotal.x, abortionstotal.y)) %>%
  select(-abortionstotal.x, -abortionstotal.y) %>%
  arrange(state, year)

state_policies1 <- state_policies %>%
  select(State, 'Status of Abortion') %>%
  rename(Status = 'Status of Abortion')

# Load state geometry data
states <- sf::read_sf("https://rstudio.github.io/leaflet/json/us-states.geojson")

# Merge state names
statenames <- read_csv("state_names.csv") %>%
  select("State", "Alpha code")

states <- full_join(states, statenames, by = c("name" = "State"))


# Merge geometry with abortion data
abortion_data_geom <- left_join(abortion_data1, states, by = c("state" = "Alpha code"))

# Ensure geometry column exists and convert to sf object
abortion_data_geom <- st_as_sf(abortion_data_geom)

# UI
ui <- fluidPage(
  titlePanel("State-Level Abortion Data and Policy Analysis"),
  p("This interactive Shiny app provides insights into abortion trends across U.S. states"),
  p("Users can explore state-specific abortion rates, totals, and policy impacts by selecting year, state, and restriction level."),

  
  sidebarLayout(
    sidebarPanel(
      selectInput("year", "Select Year:",
                  choices = valid_years,
                  selected = min(valid_years)),
      
      selectInput("status", "Current Restriction Level:",
                  choices = c("All" = "all", unique(state_policies1$Status))),
      
      hr(),
      
      helpText("Use the above filters to explore changes in abortion rates over time and group states by their current restriction level."),
      helpText("The selection of year and restriction level will dynamically update the map, graphs, and data table to provide targeted insights into abortion trends in the United States.")
    ),
    
    mainPanel(
      tabsetPanel(
        tabPanel("Map", 
                 leafletOutput("map", height = "600px"),
                 hr(),
                 h4("About the Map"),
                 p("This map shows multiple layers of abortion-related state-level abortion policies. After the ruling, several states implemented near-total bans, which has led to shifts in abortion access and corresponding rate changes across the country.")
        ),
        
        tabPanel("Line Graph",
                 h3("Total Abortions Over Time"),
                 selectInput("lineStates", "Select States:",
                             choices = unique(abortion_data1$state),
                             selected = unique(abortion_data1$state)[1],
                             multiple = TRUE),
                 plotOutput("lineGraph"),
                 hr(),
                 h4("About the Graph")
                 p()
        ),
        
        tabPanel("Data Table", 
                 h3("State-by-State Abortion Data"),
                 DT::dataTableOutput("stateTable"),
                 hr(),
                 h4("About the Data"),
                 p("This table provides detailed abortion statistics for each state in the selected year. You can sort and search the data using the table controls."),
                 p("Abortion rates, ratios, and totals vary significantly between states due to a complex interplay of factors. These include the availability of healthcare facilities, state-level legislative restrictions, population demographics, and proximity to states with different abortion laws. For instance, some states have seen increased demand for abortion services due to residents from nearby states with stricter regulations traveling across borders for care."),
                 p("The overturning of Roe v. Wade in June 2022 led to increased variability in abortion access across the United States. This table helps provide insight into the impact of policy changes over time, including reductions in access in some areas and increases in others where laws remain more permissive.")
        ),
        
        tabPanel("Data Information", 
                 h3("Meta Information About the Data"),
                 h4("Data Sources"),
                 p("The data used in this dashboard comes from multiple sources, including public and private research institutions."),
                 tags$ul(
                   tags$li("National and State Pregnancy Data: ", tags$a(href = "https://example.com/national-state-pregnancy", "NationalAndStatePregnancy_PublicUse.csv")),
                   tags$li("Monthly Abortion Provision Data: ", tags$a(href = "https://example.com/monthly-abortion-provision", "MonthlyAbortionProvisionMonthly_2023-2024.csv")),
                   tags$li("State Abortion Policies Data: ", tags$a(href = "https://example.com/abortion-state-policies", "AbortionStatePolicies.csv")),
                   tags$li("State Names Data: ", tags$a(href = "https://example.com/state-names", "state_names.csv"))
                 ),
                 h4("Data Citation"),
                 p("If you use this data in your work, please cite the sources as follows:"),
                 tags$ul(
                   tags$li("Guttmacher Institute, \"National and State Pregnancy Data\" (2024). Available from: ", tags$a(href = "https://example.com/national-state-pregnancy", "National and State Pregnancy Data")),
                   tags$li("Abortion Monthly Data, Guttmacher Institute, (2023-2024). Available from: ", tags$a(href = "https://example.com/monthly-abortion-provision", "Monthly Abortion Provision Data")),
                   tags$li("Abortion State Policies, Guttmacher Institute (2024). Available from: ", tags$a(href = "https://example.com/abortion-state-policies", "Abortion State Policies Data"))
                 ),
                 h4("Data Limitations"),
                 p("The data used in this application comes from a variety of sources and has certain limitations. It may be affected by underreporting or estimation issues. The provided data may also be subject to state-specific reporting regulations and should be used in consideration of its potential limitations."),
                 p("The data for abortion policies might not always reflect real-time changes in state policies as they are updated periodically.")
        )
      )
    )
  )
)

# Server
server <- function(input, output, session) {
  
  bins <- c(0, 5, 10, 15, 20, 25, 30, 35, Inf)
  
  # Reactive filtered data based on selected year and restriction level
  filtered_data <- reactive({
    req(input$year)
    
    # Filter data based on year
    filtered <- abortion_data_geom %>%
      filter(year == input$year)
    
    if (!is.null(input$status) && input$status != "all") {
      filtered <- filtered %>%
        left_join(state_policies1, by = c("name" = "State")) %>%
        filter(Status == input$status)
    }
    
    return(filtered)
  })
  
  filtered_line_data <- reactive({
    req(input$lineStates)
    abortion_data1 %>%
      filter(state %in% input$lineStates)
  })
  
  # Map rendering
  output$lineGraph <- renderPlot({
    data <- filtered_line_data()
    
    ggplot(data, aes(x = year, y = abortionratetotal, color = state)) +
      geom_line(size = 1) +
      labs(title = "Total Abortions Over Time by State",
           x = "Year",
           y = "Total Abortions",
           color = "State") +
      theme_minimal() +
      theme(legend.position = "bottom", legend.title = element_text(face = "bold"))
  })
  
  output$map <- renderLeaflet({
    # Get the filtered data using reactive
    data <- filtered_data()
    
    # Check if the filtered data is NULL (meaning no data available for that year)
    if (is.null(data) || !"geometry" %in% names(data)) {
      # If no data, show an empty Leaflet map with a warning label
      leaflet() %>%
        setView(-96, 37.8, zoom = 4) %>%
        addProviderTiles(providers$CartoDB.Positron) %>%
        addControl(html = "<b>No data available for the selected year and restrictions. Please choose different filters.</b>", 
                   position = "topright", 
                   className = "info-control")
    } else {
      # Proceed to create the map with filtered data
      pal <- colorBin("YlOrRd", domain = data$abortionratetotal, bins = bins, na.color = "transparent")
      
      labels <- sprintf(
        "<strong>%s</strong><br/>%g abortions per 1000 women",
        data$name, data$abortionratetotal
      ) %>% lapply(htmltools::HTML)
      
      leaflet(data) %>%
        setView(-96, 37.8, zoom = 4) %>%
        addProviderTiles(providers$CartoDB.Positron) %>%
        addPolygons(
          fillColor = ~pal(abortionratetotal),
          weight = 2,
          opacity = 1,
          color = "white",
          dashArray = "3",
          fillOpacity = 0.7,
          highlightOptions = highlightOptions(
            weight = 5,
            color = "#666",
            dashArray = "",
            fillOpacity = 0.7,
            bringToFront = TRUE),
          label = labels,
          labelOptions = labelOptions(
            style = list("font-weight" = "normal", padding = "3px 8px"),
            textsize = "15px",
            direction = "auto")) %>%
        addLegend(pal = pal, values = ~abortionratetotal, opacity = 0.7,
                  title = "Abortion Rate (per 1000 women)", position = "bottomright")
    }
  })
  
  # Data table rendering
  output$stateTable <- DT::renderDataTable({
    # Get the filtered data using reactive
    data <- filtered_data()
    
    # Check if the filtered data is NULL (meaning no data available for that year)
    if (is.null(data)) {
      # Return an empty data table with an appropriate message
      return(DT::datatable(
        data.frame(
          Message = "No data available for the selected year and restrictions. Please choose different filters."
        ),
        options = list(pageLength = 1),
        rownames = FALSE
      ))
    }
    
    # If data exists, create the data table
    data %>%
      st_drop_geometry() %>%  # Drop geometry column for non-map use cases
      select(name, abortionratetotal, abortionstotal, abortionratiototal) %>%
      rename(State = name,
             `Abortion Rate` = abortionratetotal,
             `Total Abortions` = abortionstotal,
             `Abortion Ratio` = abortionratiototal) %>%
      DT::datatable(options = list(pageLength = 10))
  })
}

shinyApp(ui = ui, server = server)

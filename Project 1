library(shiny)
library(shinydashboard)
library(mosaic)
library(tidyverse)
library(glue)
library(sf)
library(leaflet)
library(DT)

# Load data
preRoedata <- read_csv("NationalAndStatePregnancy_PublicUse.csv")
postRoedata <- read_csv("MonthlyAbortionProvisionMonthly_2023-2024.csv")

# Data Wrangling
# Pre-process data
preRoedata1 <- preRoedata %>%
  select(state, year, abortionstotal, abortionratetotal, abortionratiototal) %>%
  mutate(
    clinical_abortions = abortionstotal * 0.6,  # Adjust these proportions based on actual data
    medical_abortions = abortionstotal * 0.4,
    restriction_level = case_when(
      state %in% c("TX", "MS", "AL", "LA", "KY", "WV") ~ "high",
      state %in% c("FL", "GA", "SC", "NC", "OH", "IN") ~ "moderate",
      TRUE ~ "low"
    )
  )

postRoedata$year <- year(mdy(postRoedata$month))

postRoedata1 <- postRoedata %>%
  select(state, year, median) %>%
  group_by(state, year) %>%
  summarize(abortionstotal = sum(median)) %>%
  mutate(
    clinical_abortions = abortionstotal * 0.55,  # Adjust these proportions based on actual data
    medical_abortions = abortionstotal * 0.45,
    restriction_level = case_when(
      state %in% c("TX", "MS", "AL", "LA", "KY", "WV") ~ "high",
      state %in% c("FL", "GA", "SC", "NC", "OH", "IN") ~ "moderate",
      TRUE ~ "low"
    )
  )

abortion_data <- full_join(preRoedata1, postRoedata1, by = c("state", "year"))

abortion_data <- abortion_data %>%
  mutate(abortionstotal = coalesce(abortionstotal.x, abortionstotal.y)) %>%
  select(-abortionstotal.x, -abortionstotal.y) %>%
  arrange(state, year)

# Load state geometry data
states <- sf::read_sf("https://rstudio.github.io/leaflet/json/us-states.geojson")

# Merge state names
statenames <- read_csv("state_names.csv") %>%
  select("State", "Alpha code")

states <- full_join(states, statenames, by = c("name" = "State"))

# Merge geometry with abortion data
abortion_data_geom <- left_join(abortion_data1, states, by = c("state" = "Alpha code"))

# Ensure geometry column exists and convert to sf object
abortion_data_geom <- st_as_sf(abortion_data_geom)

# UI
ui <- fluidPage(
  titlePanel("Abortion Data by State"),
  p("This interactive Shiny app utilizes data about abortion before and after the overturn of Roe v. Wade"),
  p("Users can select the state, year, and degree of restriction ."),
  
  
  sidebarLayout(
    sidebarPanel(
      sliderInput("year", "Select Year:",
                  min = min(preRoedata$year),
                  max = max(postRoedata$year),
                  value = min(preRoedata$year),
                  step = 1,
                  sep = ""),
      
      selectInput("state", "State:",
                  choices = unique(abortion_data_geom$name)),
      
      selectInput("abortionType", "Abortion Type:",
                  choices = c("All Types" = "all",
                             "Clinical" = "clinical",
                             "Medical (Pill)" = "medical")),
      
      selectInput("restrictionLevel", "Restriction Level:",
                  choices = c("All Levels" = "all",
                             "Highly Restrictive" = "high",
                             "Moderately Restrictive" = "moderate",
                             "Less Restrictive" = "low")),
      
      hr(),
      
      helpText("This dashboard visualizes abortion data across the United States. Use the slider to select a year and the dropdown to choose a specific state.")
    ),
    
    mainPanel(
     tabsetPanel(
        tabPanel("Map", 
                 checkboxGroupInput("mapLayers", "Map Layers:",
                                  choices = c(
                                    "Total Abortions" = "total",
                                    "Clinical Abortions" = "clinical",
                                    "Medical Abortions" = "medical",
                                    "Restriction Levels" = "restrictions"
                                  ),
                                  selected = "total"),
                 leafletOutput("map", height = "600px"),
                 hr(),
                 h4("About the Map"),
                 p("This map shows multiple layers of abortion-relatcting state-level abortion policies. After the ruling, several states implemented near-total bans, which has led to shifts in abortion access and corresponding rate changes across the country.")
        ),
        tabPanel("Data Table", 
                 h3("State-by-State Abortion Data"),
                 DT::dataTableOutput("stateTable"),
                 hr(),
                 h4("About the Data"),
                 p("This table provides detailed abortion statistics for each state in the selected year. You can sort and search the data using the table controls."),
                 p("Abortion rates, ratios, and totals vary significantly between states due to a complex interplay of factors. These include the availability of healthcare facilities, state-level legislative restrictions, population demographics, and proximity to states with different abortion laws. For instance, some states have seen increased demand for abortion services due to residents from nearby states with stricter regulations traveling across borders for care."),
                 p("The overturning of Roe v. Wade in June 2022 led to increased variability in abortion access across the United States. This table helps provide insight into the impact of policy changes over time, including reductions in access in some areas and increases in others where laws remain more permissive.")
        )
      )
    )
  )
)

# Server
server <- function(input, output, session) {
  
  bins <- c(0, 5, 10, 15, 20, 25, 30, 35, Inf)
  
  # Reactive filtered data based on selected year
  filtered_data <- reactive({
    req(input$year) 
    filtered <- abortion_data_geom %>%
      filter(year == input$year)
    if (nrow(filtered) == 0) {
      return(NULL)
    }
    
    return(filtered)
  })

 # Filter by abortion type if not "all"
    if (input$abortionType != "all") {
      data <- data %>%
        mutate(selected_abortions = case_when(
          input$abortionType == "clinical" ~ clinical_abortions,
          input$abortionType == "medical" ~ medical_abortions,
          TRUE ~ abortionstotal
        ))
    } else {
      data <- data %>%
        mutate(selected_abortions = abortionstotal)
    }
    
    # Filter by restriction level if not "all"
    if (input$restrictionLevel != "all") {
      data <- data %>%
        filter(restriction_level == input$restrictionLevel)
    }
    
    st_drop_geometry(data)
  })

  # Map rendering
  output$map <- renderLeaflet({
    req(input$year)
    
    abortion_data_year <- abortion_data_geom %>%
      filter(year == input$year)
    
    # Check if the filtered data is NULL (meaning no data available for that year)
    if (is.null(abortion_data_year) || nrow(abortion_data_year) == 0) {
      # If no data, show an empty Leaflet map with a warning label
      leaflet() %>%
        setView(-96, 37.8, zoom = 4) %>%
        addProviderTiles(providers$CartoDB.Positron) %>%
        addControl(html = "<b>No data available for the selected year. Please choose a different year.</b>", 
                   position = "topright", 
                   className = "info-control")
    } else {
      pal_total <- colorBin("YlOrRd", domain = abortion_data_year$abortionratetotal, bins = bins)
    pal_clinical <- colorBin("Blues", domain = abortion_data_year$clinical_abortions, bins = bins)
    pal_medical <- colorBin("Greens", domain = abortion_data_year$medical_abortions, bins = bins)
    pal_restrictions <- colorFactor(
      palette = c("red", "orange", "yellow"),
      domain = c("high", "moderate", "low")
    )
      
    labels <- sprintf(
      "<strong>%s</strong><br/>%g abortions per 1,000 women",
      abortion_data_year$name, abortion_data_year$abortionratetotal
    ) %>% lapply(htmltools::HTML)
    
    leaflet(abortion_data_year) %>%
      setView(-96, 37.8, zoom = 4) %>%
      addProviderTiles(providers$CartoDB.Positron) %>%
      addPolygons(
        fillColor = ~pal(abortionratetotal),
        weight = 2,
        opacity = 1,
        color = "white",
        dashArray = "3",
        fillOpacity = 0.7,
        highlightOptions = highlightOptions(
          weight = 5,
          color = "#666",
          dashArray = "",
          fillOpacity = 0.7,
          bringToFront = TRUE),
        label = labels,
        labelOptions = labelOptions(
          style = list("font-weight" = "normal", padding = "3px 8px"),
          textsize = "15px",
          direction = "auto")) %>%
      addLegend(pal = pal, values = ~abortionratetotal, opacity = 0.7,
                title = "Abortion Rate", position = "bottomright")
    }
  })
  
  # Data table rendering
  output$stateTable <- DT::renderDataTable({
    data <- filtered_data() # Check if the filtered data is NULL (meaning no data available for that year)
   
     if (is.null(data)) {
      # Return an empty data table with an appropriate message
      return(DT::datatable(
        data.frame(
          Message = "No data available for the selected year. Please choose a different year."
        ),
        options = list(pageLength = 1),
        rownames = FALSE
      ))
    }
    
    data %>%
      st_drop_geometry() %>%  # Drop geometry column for non-map use cases
      select(name, abortionratetotal, abortionstotal, abortionratiototal) %>%
      rename(State = name,
             `Abortion Rate` = abortionratetotal,
             `Total Abortions` = abortionstotal,
             `Abortion Ratio` = abortionratiototal) %>%
      DT::datatable(options = list(pageLength = 10))
  })
}

shinyApp(ui = ui, server = server)

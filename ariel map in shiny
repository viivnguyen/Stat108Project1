library(shiny)
library(mosaic)
library(tidyverse)
library(glue)

# app.R (UI section)
ui <- fluidPage(
  titlePanel("Abortion Data by State"),
  
  sidebarLayout(
    sidebarPanel(
      sliderInput("year", "Select Year:",
                  min = min(preRoedata$year, postRoedata$year),
                  max = max(preRoedata$year, postRoedata$year),
                  value = min(preRoedata$year, postRoedata$year),
                  step = 1,
                  sep = ""),
      
      selectInput("state", "State:",
                  choices = unique(abortion_data_geom$name))
    ),
    
    mainPanel(
      leafletOutput("map", height = "600px")
    )
  )
)


# app.R (Server section)
server <- function(input, output, session) {
  
  # Load Data
  preRoedata <- read_csv("OG_NationalAndStatePregnancy_PreDobbs_1988-2020.csv")
  postRoedata <- read_csv("OG_MonthlyAbortionProvisionMonthly_2023-2024.csv")
  statenames <- read_csv("state_names.csv")
  
  # Data Preparation
  preRoedata1 <- preRoedata %>%
    select(state, year, abortionstotal, abortionratetotal)
  
  postRoedata$year <- lubridate::year(lubridate::mdy(postRoedata$month))
  
  postRoedata1 <- postRoedata %>%
    select(state, year, median) %>%
    group_by(state, year) %>%
    summarize(abortionstotal = sum(median))
  
  abortion_data <- full_join(preRoedata1, postRoedata1, by = c("state", "year"))
  
  abortion_data1 <- abortion_data %>%
    mutate(abortionstotal = coalesce(abortionstotal.x, abortionstotal.y)) %>%
    select(state, year, abortionstotal, abortionratetotal) %>%
    arrange(state, year)
  
  states <- sf::read_sf("https://rstudio.github.io/leaflet/json/us-states.geojson")
  states <- full_join(states, statenames, by = c("name" = "State"))
  
  abortion_data_geom <- left_join(abortion_data1, states, by = c("state" = "Alpha code.x"))
  abortion_data_geom <- st_as_sf(abortion_data_geom) %>%
    st_transform(crs = 4326)
  
  # Define color bins
  bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
  
  output$map <- renderLeaflet({
    req(input$year)
    
    # Filter data based on selected year
    abortion_data_year <- abortion_data_geom %>%
      filter(year == input$year)
    
    # Create color palette
    pal <- colorBin(input$colorScheme, domain = abortion_data_year$abortionratetotal, bins = bins)
    
    labels <- sprintf(
      "<strong>%s</strong><br/>%g abortions / 1000 live births",
      abortion_data_year$name, abortion_data_year$abortionratetotal
    ) %>% lapply(htmltools::HTML)
    
    leaflet(abortion_data_year) %>%
      setView(-96, 37.8, 4) %>%
      addProviderTiles("MapBox", options = providerTileOptions(
        id = "mapbox.light",
        accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
      addPolygons(
        fillColor = ~pal(abortionratetotal),
        weight = 2,
        opacity = 1,
        color = "white",
        dashArray = "3",
        fillOpacity = 0.7,
        highlightOptions = highlightOptions(
          weight = 5,
          color = "#666",
          dashArray = "",
          fillOpacity = 0.7,
          bringToFront = TRUE),
        label = labels,
        labelOptions = labelOptions(
          style = list("font-weight" = "normal", padding = "3px 8px"),
          textsize = "15px",
          direction = "auto")) %>%
      addLegend(pal = pal, values = ~abortionratetotal, opacity = 0.7, title = "Abortion Rate",
                position = "bottomright")
  })
}


shinyApp(ui = ui, server = server)
